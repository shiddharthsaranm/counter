{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","styles","fontSize","this","props","tags","length","map","tag","key","Fragment","children","style","className","getBadgeClasses","countFinder","onClick","onIncrement","counter","id","onDelete","renderTags","classes","value","React","Component","Counters","onCreate","onReset","counters","navbar","App","state","handleIncrement","counterId","x","setState","handleDelete","filter","counte","handleReset","handleCreate","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aff888a2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Counter extends React.Component{\r\n\t// state={\r\n\t// \tcount:this.props.counter.value,\r\n\t// \ttags:[\"tag1\",\"tag2\",\"tag3\"]\r\n\t// };\r\n\r\n\tstyles={\r\n\t\tfontSize:50\r\n\t}\r\n\r\n\trenderTags(){\r\n\t\tif(this.props.tags.length===0){\r\n\t\t\treturn <h1>There are no elements!</h1>;\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn <ul>{this.props.tags.map(tag=><li key={tag}>{tag}</li>)}</ul>;\r\n\t\t}\r\n\t}\r\n\r\n\t// handeIncrement=product=>{\r\n\t// \tthis.setState({count:this.state.count+1});\r\n\t// }\r\n\t\r\n\trender(){\r\n\t\treturn(\t\r\n\t\t\t<React.Fragment>\r\n\t\t\t\r\n\t\t\t{this.props.children}\r\n\t\t\t\r\n\t\t\t<span style={this.styles} className={this.getBadgeClasses()}>{this.countFinder()}</span>\t\r\n\t\t\t<button onClick={()=>this.props.onIncrement(this.props.counter.id)} id=\"but\" className=\"btn btn-primary btn-lg\">Increment</button>\r\n\t\t\t<button onClick={()=>this.props.onDelete(this.props.counter.id)} id=\"del\" className=\"btn btn-danger btn-lg\">Delete</button>\r\n\t\t\t\r\n\t\t\t{this.renderTags()}\r\n\t\t\t\t\r\n\t\t\t</React.Fragment>\r\n\t\t);\t\t\r\n\t}\r\n\t\r\n\tgetBadgeClasses(){\r\n\t\tlet classes=\"badge m-2 badge-\";\r\n\t\tif(this.props.counter.value===0){\r\n\t\t\treturn classes+=\"warning\"\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(this.props.counter.value%5===0){\r\n\t\t\t\treturn classes+=\"danger\";\r\n\t\t\t}\r\n\t\t\treturn classes+=\"primary\";\r\n\t\t}\r\n\t}\r\n\t\r\n\tcountFinder(){\r\n\t\tif (this.props.counter.value===0){\r\n\t\t\treturn \"Zero\";\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn this.props.counter.value;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nexport default Counter;","import React from 'react';\r\n\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends React.Component{\r\n\r\n\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={this.props.onCreate} className=\"btn btn-success btn-lg\">Create</button>\r\n\t\t\t\t<button onClick={this.props.onReset} className=\"btn btn-warning btn-lg\">Reset</button>\r\n\t\t\t\t\r\n\t\t\t\t{this.props.counters.map(counter=>\r\n\t\t\t\t\t\t\t\t\t\t<Counter key={counter.id} counter={counter} onIncrement={this.props.onIncrement} onDelete={this.props.onDelete} tags={[\"tag1\",\"tag2\",\"tag3\"]}>\r\n\t\t\t\t\t\t\t\t\t\t\t <h1>Counter #{counter.id}</h1>\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t\t\t\t </Counter>\t\t\t\t\t\t\r\n\t\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Counters;","import React from 'react';\r\n\r\nimport App from \"../App\"\r\n\r\nclass navbar extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<nav className=\"navbar navbar-light bg-light\">\r\n\t\t\t<span className=\"navbar-brand mb-0 h1\">Navbar</span>\r\n\t\t\t<span className=\"navbar-link mb-0 h1\">{this.props.length}</span>\r\n\t\t\t</nav>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default navbar;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport Counters from \"./components/counters\"\nimport NavBar from \"./components/navbar\"\n\nclass App extends React.Component {\n\tstate={\n\t\tcounters:[\n\t\t\t{id:1,value:5},\n\t\t\t{id:2,value:0},\n\t\t\t{id:3,value:0},\n\t\t\t{id:4,value:0}\n\t\t]\n\t}\n\t\n\thandleIncrement=counterId=>{\n\t\tconst counters=this.state.counters.map(function(x){\n\t\t\tif(x.id===counterId){\n\t\t\t\tx.value+=1;\n\t\t\t\treturn x;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn x;\n\t\t\t}\n\t\t});\n\t\tthis.setState({counters});\n\t}\n\n\thandleDelete=counterId=>{\n\t\tconst counters=this.state.counters.filter(counte=>counte.id!==counterId);\n\t\tthis.setState({counters:counters});\n\t}\n\n\thandleReset=()=>{\n\t\tconst counters=this.state.counters.map(counte=>\n\t\t\t\t\t{\n\t\t\t\t\t\tcounte.value=0\n\t\t\t\t\t\treturn counte\n\t\t\t\t\t});\n\t\t\n\t\tthis.setState({counters});\n\t}\n\t\n\thandleCreate=()=>{\n\t\t\n\t\tthis.state.counters.push({id:this.state.counters[this.state.counters.length-1].id+1,value:0});\n\t\tconst counters=this.state.counters.map(x=>x);\n\t\tthis.setState(counters);\n\t}\n\n\t\n\trender(){\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<NavBar \n\t\t\t\t\tlength={this.state.counters.filter(counte=>counte.value>0).length}\n\t\t\t\t\t/>\n\t\t\t\t<Counters \n\t\t\t\t\tcounters={this.state.counters}\n\t\t\t\t\tonIncrement={this.handleIncrement} \n\t\t\t\t\tonDelete={this.handleDelete}\n\t\t\t\t\tonReset={this.handleReset}\n\t\t\t\t\tonCreate={this.handleCreate}\n\t\t\t\t\t/>\n\t\t\t\t<main className=\"container\"></main>\n\t\t\t</React.Fragment>\n\t  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}